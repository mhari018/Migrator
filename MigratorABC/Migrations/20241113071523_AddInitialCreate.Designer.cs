// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MigratorProduct.Entities;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MigratorABC.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241113071523_AddInitialCreate")]
    partial class AddInitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "product_category_type", new[] { "radio", "checkbox", "auto_apply" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "product_type", new[] { "single", "group" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MigratorProduct.Entities.OptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("SI001")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("SI001");

                    b.Property<string>("SI002")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("SI002");

                    b.Property<string>("SI003")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("SI003");

                    b.Property<string>("SI007")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("SI007");

                    b.HasKey("Id");

                    b.ToTable("option_group", (string)null);
                });

            modelBuilder.Entity("MigratorProduct.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActiveAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("active_at");

                    b.Property<List<string>>("AvailablePlatform")
                        .HasMaxLength(25)
                        .HasColumnType("text[]")
                        .HasColumnName("available_platform");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("brand");

                    b.Property<List<string>>("Characteristic")
                        .HasMaxLength(4)
                        .HasColumnType("text[]")
                        .HasColumnName("characteristic");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("display_name");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<JsonDocument>("MetadataCategory")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata_category");

                    b.Property<string>("MetadataCode")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("metadata_code");

                    b.Property<bool>("MetadataDelivery")
                        .HasColumnType("boolean")
                        .HasColumnName("metadata_delivery");

                    b.Property<bool>("MetadataExternal")
                        .HasColumnType("boolean")
                        .HasColumnName("metadata_external");

                    b.Property<string>("MetadataName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("metadata_name");

                    b.Property<bool>("MetadataPickup")
                        .HasColumnType("boolean")
                        .HasColumnName("metadata_pickup");

                    b.Property<bool>("MetadataSelling")
                        .HasColumnType("boolean")
                        .HasColumnName("metadata_selling");

                    b.Property<JsonDocument>("MetadataSeries")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata_series");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<List<string>>("SiteListing")
                        .HasMaxLength(4)
                        .HasColumnType("text[]")
                        .HasColumnName("site_listing");

                    b.Property<int>("Type")
                        .HasColumnType("product_type")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("product");
                });

            modelBuilder.Entity("MigratorProduct.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("code");

                    b.Property<JsonDocument>("Constrains")
                        .HasColumnType("jsonb")
                        .HasColumnName("constrains");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("DefaultCode")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("default_code");

                    b.Property<JsonDocument>("Lang")
                        .HasColumnType("jsonb")
                        .HasColumnName("lang");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<bool>("QuantityEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("quantity_enabled");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<bool>("SoldOutRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("sold_out_required");

                    b.Property<int>("Type")
                        .HasColumnType("product_category_type")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_category");
                });

            modelBuilder.Entity("MigratorProduct.Entities.ProductCombination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<List<string>>("Characteristic")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("text[]")
                        .HasColumnName("characteristic");

                    b.Property<List<string>>("CombinationCode")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("text[]")
                        .HasColumnName("combination_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<List<string>>("RequiredOptionCodes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("required_option_codes");

                    b.Property<string>("ResultCode")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("result_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_combination", (string)null);
                });

            modelBuilder.Entity("MigratorProduct.Entities.ProductOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<List<string>>("AvailableOn")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("available_on");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<JsonDocument>("Product")
                        .HasColumnType("jsonb")
                        .HasColumnName("product");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_option");
                });

            modelBuilder.Entity("MigratorProduct.Entities.ProductPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("PimUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("pim_updated_at");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<int>("PriceWithoutTax")
                        .HasColumnType("integer")
                        .HasColumnName("price_without_tax");

                    b.Property<int>("PricingType")
                        .HasColumnType("integer")
                        .HasColumnName("pricing_type");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("product_code");

                    b.Property<string>("SiteCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("site_code");

                    b.Property<bool>("SoldOut")
                        .HasColumnType("boolean")
                        .HasColumnName("sold_out");

                    b.Property<int>("Tax")
                        .HasColumnType("integer")
                        .HasColumnName("tax");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("product_price", (string)null);
                });

            modelBuilder.Entity("MigratorProduct.Entities.ProductCategory", b =>
                {
                    b.HasOne("MigratorProduct.Entities.Product", null)
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MigratorProduct.Entities.ProductCombination", b =>
                {
                    b.HasOne("MigratorProduct.Entities.Product", null)
                        .WithMany("Combinations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MigratorProduct.Entities.ProductOption", b =>
                {
                    b.HasOne("MigratorProduct.Entities.Product", null)
                        .WithMany("Options")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MigratorProduct.Entities.Product", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Combinations");

                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
